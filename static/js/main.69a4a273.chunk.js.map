{"version":3,"sources":["components/Footer/index.tsx","components/Header/index.tsx","HomePage.tsx","MissingPage/index.tsx","utils.ts","pokeapi.ts","components/TypeBadge/index.tsx","TypesPage/TypeSummary.tsx","PokemonPage/PokemonDetails.tsx","PokemonPage/index.tsx","TypesPage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","react_default","a","createElement","Segment","vertical","secondary","size","className","href","Header","Menu","inverted","borderless","color","style","borderRadius","Container","Item","as","Link","to","Image","src","process","spaced","icon","position","Icon","name","HomePage","MissingPage","fluid","textAlign","Header_Header","Subheader","titleCase","s","slice","toUpperCase","keyedValue","data","arguments","length","undefined","search","find","d","Object","keys","every","key","_get","pokeapi","Pokedex","protocol","TypeBadge","type","this","props","Label","concat","React","Component","TypeSummary","state","loading","typeData","types","setState","newTypeData","getTypeByName","fetchTypeData","newProps","multipliers","Map","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Symbol","iterator","next","done","defenseType","value","damage_relations","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","double_damage_from","attackType","update","v","err","return","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","half_damage_from","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","no_damage_from","set","filter","m","calcDamageMultipliers","entrySeq","map","_ref7","_ref8","slicedToArray","multiplier","sort","b","localeCompare","toJS","Card","Content","Fragment","t","List","Grid","Row","Column","width","_ref9","_ref10","TypeBadge_TypeBadge","MultiplierBadge","by","_ref11","_ref12","_ref13","_$025$05$1$2$4$by$","0","text","0.25","fraction","0.5","1","2","4","toString","_$025$05$1$2$4$by$$te","_$025$05$1$2$4$by$$fr","cx","circular","PokemonDetails","chosenVariety","speciesDetails","varieties","pokemon","getPokemonSpeciesByName","varietyPromises","_ref3","asyncToGenerator","regenerator_default","mark","_callee","_ref2","is_default","variety","wrap","_context","prev","abrupt","getPokemonByName","stop","_x","apply","varietyPromise","fetchPokemonDetails","_this$state","placeholder","PokemonInfo","species","TypeSummary_TypeSummary","_ref4","floated","sprites","front_default","pokedex_numbers","pokedex.name","entry_number","names","language.name","Meta","genera","genus","_ref5","slot","Description","flavor_text_entries","version.name","flavor_text","replace","PokemonPage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","pokedex","handlePokemon","bind","assertThisInitialized","getPokedexByName","pokemon_entries","_","_ref","stackable","PokemonDropdown","onChange","stretched","PokemonDetails_PokemonDetails","options","pokemon_species","Dropdown","compact","selection","TypesPage","typeList","getTypesList","results","index","_this2","Error","e","newTypes","push","TypeDropdown","handleTypes","some","clearable","App","BrowserRouter","basename","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69a4a273.chunk.js","sourcesContent":["import React from \"react\";\nimport { Icon, Segment } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function Footer() {\n  return (\n    <Segment\n      vertical={true}\n      secondary={true}\n      size=\"mini\"\n      className=\"site-footer\"\n    >\n      <p>\n        Data is from <a href=\"https://pokeapi.co/\">The PokéAPI</a>. Pokémon and\n        Pokémon character names are trademarks of Nintendo.\n      </p>\n    </Segment>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Icon, Image, Menu } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function Header() {\n  const logoUrl = process.env.PUBLIC_URL + \"/logo.svg\";\n  return (\n    <Menu\n      className=\"top-nav\"\n      inverted={true}\n      borderless={true}\n      color=\"red\"\n      style={{ borderRadius: 0 }}\n    >\n      <Container>\n        <Menu.Item as={Link} to=\"/\">\n          <Image src={logoUrl} spaced=\"right\" className=\"logo\" />\n          Battle Buddy\n        </Menu.Item>\n        <Menu.Item as={Link} to=\"/pokemon\">\n          Pokemon\n        </Menu.Item>\n        <Menu.Item as={Link} to=\"/types\">\n          Types\n        </Menu.Item>\n        <Menu.Item\n          icon={true}\n          position=\"right\"\n          as=\"a\"\n          href=\"https://github.com/mythmon/battle-buddy\"\n        >\n          <Icon name=\"github\" />\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Grid, Segment } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport function HomePage() {\n  return (\n    <div className=\"home-page\">\n      <Segment vertical={true} className=\"site-info\">\n        <p>\n          Battle Buddy is a tool to help you win battles in Pokemon Let's Go.\n        </p>\n        <p>\n          There are two tools. The first shows{\" \"}\n          <Link to=\"/pokemon\">information about Pokemon</Link>, and what types\n          they are strong and weak against.\n        </p>\n        <p>\n          The second lets you pick <Link to=\"/types\">any types you want</Link>,\n          and it shows what types that combination is strong and weak against\n        </p>\n      </Segment>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container, Header, Icon } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function MissingPage() {\n  return (\n    <Container fluid={true} textAlign=\"center\" className=\"missing-page\">\n      <Header as=\"h1\" icon={true}>\n        <Icon name=\"question circle\" />\n        Page not found\n        <Header.Subheader>We couldn't find that one</Header.Subheader>\n      </Header>\n    </Container>\n  );\n}\n","import _get from \"lodash-es/get\";\n\nexport function titleCase(s: string) {\n  return s.slice(0, 1).toUpperCase() + s.slice(1);\n}\n\nexport function keyedValue(\n  data: Array<{ [key: string]: any }> = [],\n  search: { [key: string]: any },\n) {\n  return (\n    data.find(d =>\n      Object.keys(search).every(key => _get(d, key) === search[key]),\n    ) || {}\n  );\n}\n","import { Pokedex } from \"pokeapi-js-wrapper\";\n\nconst pokeapi = new Pokedex({\n  protocol: \"https\",\n});\nexport default pokeapi;\n","import React from \"react\";\nimport { Label } from \"semantic-ui-react\";\n\nimport { titleCase } from \"../../utils\";\nimport \"./style.css\";\n\nexport default class TypeBadge extends React.Component<{\n  type: string;\n}> {\n  public render() {\n    const { type } = this.props;\n    return (\n      <Label className={`type ${type}`}>\n        <span className=\"inner\">{titleCase(type)}</span>\n      </Label>\n    );\n  }\n}\n","import cx from \"classnames\";\nimport { Map } from \"immutable\";\nimport React from \"react\";\nimport { Card, Dimmer, Grid, Label, List } from \"semantic-ui-react\";\n\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport \"./style.css\";\n\ninterface TypeSummaryProps {\n  types: string[];\n}\n\ninterface TypeSummaryState {\n  typeData: { [type: string]: TypeData };\n  loading: boolean;\n}\n\ninterface TypeData {\n  name: string;\n}\n\nexport default class TypeSummary extends React.Component<\n  TypeSummaryProps,\n  TypeSummaryState\n> {\n  public state = {\n    loading: false,\n    typeData: {},\n  };\n\n  public async fetchTypeData(types = this.props.types) {\n    for (const type of types) {\n      if (this.state.typeData[type]) {\n        continue;\n      }\n      this.setState({ loading: true });\n      const newTypeData = { ...this.state.typeData };\n      newTypeData[type] = await pokeapi.getTypeByName(type);\n      this.setState({ typeData: newTypeData });\n    }\n    this.setState({ loading: false });\n  }\n\n  public componentDidMount() {\n    this.fetchTypeData();\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this.fetchTypeData(newProps.types);\n  }\n\n  public calcDamageMultipliers(): Map<string, number> {\n    let multipliers: Map<string, number> = Map();\n    for (const defenseType of this.props.types) {\n      if (!this.state.typeData[defenseType]) {\n        continue;\n      }\n      const { damage_relations } = this.state.typeData[defenseType];\n      for (const { name: attackType } of damage_relations.double_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v * 2);\n      }\n      for (const { name: attackType } of damage_relations.half_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v / 2);\n      }\n      for (const { name: attackType } of damage_relations.no_damage_from) {\n        multipliers = multipliers.set(attackType, 0);\n      }\n    }\n    return multipliers.filter(m => m !== 1);\n  }\n\n  public render() {\n    const { types } = this.props;\n    const { loading } = this.state;\n\n    const multipliers = this.calcDamageMultipliers()\n      .entrySeq()\n      .map(([type, multiplier]) => ({ type, multiplier }))\n      .sort((a, b) => {\n        if (a.multiplier > b.multiplier) {\n          return -1;\n        } else if (a.multiplier < b.multiplier) {\n          return 1;\n        } else {\n          return a.type.localeCompare(b.type);\n        }\n      })\n      .toJS();\n\n    return (\n      <Card fluid={true}>\n        <Card.Content>\n          <Card.Header>\n            {types.length > 0 && (\n              <>\n                {titleCase(types[0])}\n                {types.slice(1).map(t => (\n                  <span key={t}> × {titleCase(t)}</span>\n                ))}\n              </>\n            )}\n          </Card.Header>\n        </Card.Content>\n        <Card.Content>\n          <List>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier >= 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier < 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </List>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\nfunction MultiplierBadge({ by }) {\n  const { text = by.toString(), color, fraction = false } = {\n    \"0\": { text: \"0x\", color: \"black\" },\n    \"0.25\": { text: \"¼\", color: \"purple\", fraction: true },\n    \"0.5\": { text: \"½\", color: \"red\", fraction: true },\n    \"1\": { text: \"1x\" },\n    \"2\": { text: \"2x\", color: \"green\" },\n    \"4\": { text: \"4x\", color: \"blue\" },\n  }[by.toString()];\n\n  return (\n    <Label\n      className={cx(\"multiplier-badge\", { fraction })}\n      circular={true}\n      size=\"large\"\n      color={color}\n    >\n      <span>{text}</span>\n    </Label>\n  );\n}\n","import React from \"react\";\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport { PokemonSpecies, PokemonVariety } from \".\";\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport TypeSummary from \"../TypesPage/TypeSummary\";\nimport { keyedValue } from \"../utils\";\n\ninterface PokemonDetailsProps {\n  pokemon: string;\n}\n\ninterface PokemonDetailsState {\n  loading: boolean;\n  speciesDetails: null | PokemonSpecies;\n  varieties: { [name: string]: PokemonVariety };\n  chosenVariety: null | string;\n}\n\nexport default class PokemonDetails extends React.Component<\n  PokemonDetailsProps,\n  PokemonDetailsState\n> {\n  public state = {\n    chosenVariety: null,\n    loading: false,\n    speciesDetails: null,\n    varieties: {},\n  };\n\n  public async fetchPokemonDetails({ pokemon } = this.props) {\n    if (!pokemon) {\n      return;\n    }\n    this.setState({ loading: true });\n    const speciesDetails = await pokeapi.getPokemonSpeciesByName(pokemon);\n    this.setState({ speciesDetails });\n\n    let chosenVariety = null;\n\n    const varietyPromises = speciesDetails.varieties.map(\n      async ({ is_default, pokemon: variety }) => {\n        if (is_default) {\n          chosenVariety = variety.name;\n        }\n        return pokeapi.getPokemonByName(variety.name);\n      },\n    );\n    const varieties = {};\n    for (const varietyPromise of varietyPromises) {\n      const variety = await varietyPromise;\n      varieties[variety.name] = variety;\n    }\n    if (!chosenVariety) {\n      chosenVariety = await varietyPromises[0].name;\n    }\n\n    this.setState({ loading: false, varieties, chosenVariety });\n  }\n\n  public componentDidMount() {\n    this.fetchPokemonDetails();\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this.fetchPokemonDetails(newProps);\n  }\n\n  public render() {\n    const { loading, speciesDetails, varieties, chosenVariety } = this.state;\n\n    const variety = varieties && varieties[chosenVariety];\n\n    return (\n      <>\n        {!variety && !speciesDetails && (\n          <Grid.Column width={16}>\n            <Segment placeholder={true}>\n              <Header icon={true}>\n                <Icon name=\"search\" />\n                Search for a defending pokemon to begin\n              </Header>\n            </Segment>\n          </Grid.Column>\n        )}\n        <Grid.Column width={8}>\n          {speciesDetails && variety && (\n            <PokemonInfo species={speciesDetails} variety={variety} />\n          )}\n        </Grid.Column>\n        <Grid.Column width={8}>\n          {variety && (\n            <TypeSummary types={variety.types.map(t => t.type.name)} />\n          )}\n        </Grid.Column>\n      </>\n    );\n  }\n}\n\nfunction PokemonInfo({ species, variety }) {\n  return (\n    <Card fluid={true}>\n      <Card.Content>\n        {variety && (\n          <Image\n            className=\"pokemon-sprite\"\n            floated=\"left\"\n            src={variety.sprites.front_default}\n          />\n        )}\n        {species && (\n          <>\n            <Card.Header>\n              #\n              {\n                keyedValue(species.pokedex_numbers, {\n                  \"pokedex.name\": \"kanto\",\n                }).entry_number\n              }{\" \"}\n              -{\" \"}\n              {\n                keyedValue(species.names, {\n                  \"language.name\": \"en\",\n                }).name\n              }\n            </Card.Header>\n            <Card.Meta>\n              {\n                keyedValue(species.genera, {\n                  \"language.name\": \"en\",\n                }).genus\n              }\n            </Card.Meta>\n          </>\n        )}\n        {variety &&\n          variety.types.map(({ slot, type: { name } }) => (\n            <TypeBadge key={slot} type={name} />\n          ))}\n        {species && (\n          <Card.Description>\n            {keyedValue(species.flavor_text_entries, {\n              \"language.name\": \"en\",\n              \"version.name\": \"yellow\",\n            }).flavor_text.replace(\"\\u000C\", \" \")}\n          </Card.Description>\n        )}\n      </Card.Content>\n    </Card>\n  );\n}\n","import _get from \"lodash-es/get\";\nimport React from \"react\";\nimport { Dropdown, Grid, Header, Segment } from \"semantic-ui-react\";\nimport { titleCase } from \"../utils\";\n\nimport pokeapi from \"../pokeapi\";\nimport PokemonDetails from \"./PokemonDetails\";\nimport \"./style.css\";\n\ninterface PokemonPageState {\n  loading: boolean;\n  pokedex: null | PokedexEntry[];\n  pokemon: null | string;\n}\n\ninterface PokedexEntry {\n  entry_number: number;\n  pokemon_species: {\n    name: string;\n  };\n}\n\nexport default class PokemonPage extends React.Component<{}, PokemonPageState> {\n  public state = {\n    loading: true,\n    pokedex: null,\n    pokemon: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handlePokemon = this.handlePokemon.bind(this);\n  }\n\n  public async componentDidMount() {\n    if (this.state.pokedex === null) {\n      this.setState({ loading: true });\n      const data = await pokeapi.getPokedexByName(\"kanto\");\n      this.setState({ loading: false, pokedex: data.pokemon_entries });\n    }\n  }\n\n  public handlePokemon(_: any, { value }: { value: string }) {\n    this.setState({ pokemon: value });\n  }\n\n  public render() {\n    const { pokemon, pokedex } = this.state;\n\n    return (\n      <Segment vertical={true}>\n        <Grid stackable={true}>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h2\">Defender Info</Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <PokemonDropdown\n                onChange={this.handlePokemon}\n                pokedex={pokedex}\n                value={pokemon}\n                placeholder=\"Defending Pokemon\"\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched={true}>\n            <PokemonDetails pokemon={pokemon} />\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    );\n  }\n}\n\nfunction PokemonDropdown({\n  onChange,\n  pokedex,\n  value,\n  placeholder,\n}: {\n  onChange?: (ev, el) => void;\n  pokedex: PokedexEntry[];\n  value: string;\n  placeholder?: string;\n}) {\n  let options;\n  if (pokedex) {\n    options = pokedex.map(pokemon => ({\n      key: pokemon.pokemon_species.name,\n      text: titleCase(pokemon.pokemon_species.name),\n      value: pokemon.pokemon_species.name,\n    }));\n  } else if (value) {\n    options = [{ key: value, text: titleCase(value), value }];\n  } else {\n    options = [];\n  }\n\n  return (\n    <Dropdown\n      compact={true}\n      fluid={true}\n      placeholder={placeholder}\n      search={true}\n      selection={true}\n      options={options}\n      onChange={onChange}\n      value={value}\n    />\n  );\n}\n\nexport interface PokemonSpecies {\n  name: string;\n  names: PokemonName[];\n  pokedex_numbers: PokedexNumber[];\n}\n\ninterface PokemonName {\n  name: string;\n  language: {\n    name: string;\n  };\n}\n\ninterface PokedexNumber {\n  entry_number: number;\n  pokedex: {\n    name: string;\n  };\n}\n\nexport interface PokemonVariety {\n  name: string;\n}\n","import React from \"react\";\nimport { Dropdown, Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport TypeSummary from \"./TypeSummary\";\n\ninterface TypesPageState {\n  typeList: null | PokedexType[];\n  types: string[];\n}\n\ninterface PokedexType {\n  name: string;\n}\n\nexport default class TypesPage extends React.Component<{}, TypesPageState> {\n  public state = {\n    typeList: null,\n    types: [null, null],\n  };\n\n  public async componentDidMount() {\n    if (this.state.typeList === null) {\n      const data = await pokeapi.getTypesList();\n      this.setState({ typeList: data.results });\n    }\n  }\n\n  public handleTypes(index) {\n    if (index < 0 || index > 1) {\n      throw new Error(`Invalid index ${index}`);\n    }\n    return (e, { value }: { value: string }) => {\n      this.setState(state => {\n        state.types[index] = value;\n        const newTypes = state.types.filter(t => !!t);\n        while (newTypes.length < 2) {\n          newTypes.push(null);\n        }\n        return { types: newTypes };\n      });\n    };\n  }\n\n  public render() {\n    const { types, typeList } = this.state;\n\n    return (\n      <Segment vertical={true}>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h2\">Defender Info</Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={8}>\n              <TypeDropdown\n                onChange={this.handleTypes(0)}\n                typeList={typeList}\n                value={types[0]}\n                placeholder={\"First Type\"}\n              />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              <TypeDropdown\n                onChange={this.handleTypes(1)}\n                typeList={typeList}\n                value={types[1]}\n                placeholder={\"Second Type\"}\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              {types && types.some(t => !!t) ? (\n                <TypeSummary types={types.filter(t => !!t)} />\n              ) : (\n                <Segment placeholder={true}>\n                  <Header icon={true}>\n                    <Icon name=\"search\" />\n                    Search for a type to begin\n                  </Header>\n                </Segment>\n              )}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    );\n  }\n}\n\nfunction TypeDropdown({ value, typeList, onChange, placeholder }) {\n  let options;\n  if (typeList) {\n    options = typeList.map(type => ({\n      key: type.name,\n      text: titleCase(type.name),\n      value: type.name,\n    }));\n  } else if (value) {\n    options = [{ key: value, text: titleCase(value), value }];\n  } else {\n    options = [];\n  }\n  options.sort((a: { text: string }, b: { text: string }) =>\n    a.text.localeCompare(b.text),\n  );\n\n  return (\n    <Dropdown\n      compact={true}\n      fluid={true}\n      placeholder={placeholder}\n      search={true}\n      selection={true}\n      clearable={true}\n      options={options}\n      onChange={onChange}\n      value={value}\n    />\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.css\";\nimport { Container } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport { HomePage } from \"./HomePage\";\nimport MissingPage from \"./MissingPage\";\nimport PokemonPage from \"./PokemonPage\";\nimport TypesPage from \"./TypesPage/index\";\n\nimport \"./style.css\";\n\nexport default class App extends Component {\n  public render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <>\n          <Header />\n          <Container className=\"root\">\n            <Switch>\n              <Route exact={true} path=\"/\" component={HomePage} />\n              <Route path=\"/pokemon\" component={PokemonPage} />\n              <Route path=\"/types\" component={TypesPage} />\n              <Route component={MissingPage} />\n            </Switch>\n          </Container>\n          <Footer />\n        </>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line: no-console\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line: no-console\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line: no-console\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line: no-console\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line: no-console\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}