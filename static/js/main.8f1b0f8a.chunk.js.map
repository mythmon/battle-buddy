{"version":3,"sources":["components/Footer/index.tsx","components/Header/index.tsx","HomePage.tsx","MissingPage/index.tsx","pokeapi.ts","utils.ts","components/ErrorDisplay.tsx","components/TypeBadge/index.tsx","TypesPage/TypeSummary.tsx","PokemonPage/PokemonDetails.tsx","PokemonPage/index.tsx","TypesPage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","react_default","a","createElement","Segment","vertical","secondary","size","className","href","Header","Menu","inverted","borderless","color","style","borderRadius","Container","Item","as","Link","to","Image","src","process","spaced","icon","position","Icon","name","HomePage","MissingPage","fluid","textAlign","Header_Header","Subheader","pokeapi","Pokedex","protocol","titleCase","s","slice","toUpperCase","keyedValue","data","arguments","length","undefined","search","find","d","Object","keys","every","key","_get","ErrorDisplay","_ref","error","description","source","toString","TypeBadge","type","this","props","Label","concat","React","Component","TypeSummary","state","loading","typeData","types","setState","newTypeData","getTypeByName","fetchTypeData","newProps","multipliers","Map","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Symbol","iterator","next","done","defenseType","value","damage_relations","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","double_damage_from","attackType","update","v","err","return","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","half_damage_from","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","no_damage_from","set","filter","m","calcDamageMultipliers","entrySeq","map","_ref7","_ref8","slicedToArray","multiplier","sort","b","localeCompare","toJS","Card","Content","Fragment","t","List","Grid","Row","Column","width","_ref9","_ref10","TypeBadge_TypeBadge","MultiplierBadge","by","_ref11","_ref12","_ref13","_$025$05$1$2$4$by$","0","text","0.25","fraction","0.5","1","2","4","_$025$05$1$2$4$by$$te","_$025$05$1$2$4$by$$fr","cx","circular","PokemonDetails","chosenVariety","speciesDetails","varieties","pokemon","getPokemonSpeciesByName","varietyPromises","_ref3","asyncToGenerator","regenerator_default","mark","_callee","_ref2","is_default","variety","wrap","_context","prev","abrupt","getPokemonByName","stop","_x","apply","varietyPromise","console","_context2","t1","fetchPokemonDetails","_this$state","placeholder","PokemonInfo","species","TypeSummary_TypeSummary","_ref4","floated","sprites","front_default","pokedex_numbers","pokedex.name","entry_number","names","language.name","Meta","genera","genus","_ref5","slot","Description","flavor_text_entries","version.name","flavor_text","replace","PokemonPage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","pokedex","handlePokemon","bind","assertThisInitialized","getPokedexByName","pokemon_entries","_","_this$props","history","newUrl","match","path","push","stackable","PokemonDropdown","onChange","params","stretched","PokemonDetails_PokemonDetails","withRouter","options","pokemon_species","some","o","Dropdown","compact","selection","TypesPage","typeList","getTypesList","results","checkTypes","index","_this2","Error","_event","_this2$props","split","join","getTypes","TypeDropdown","handleTypes","data-types","JSON","stringify","_this3","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","typeDefinition","_iterator","_ret","clearable","App","BrowserRouter","basename","Switch","Route","exact","component","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f1b0f8a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Icon, Segment } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function Footer() {\n  return (\n    <Segment\n      vertical={true}\n      secondary={true}\n      size=\"mini\"\n      className=\"site-footer\"\n    >\n      <p>\n        Data is from <a href=\"https://pokeapi.co/\">The PokéAPI</a>. Pokémon and\n        Pokémon character names are trademarks of Nintendo.\n      </p>\n    </Segment>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Icon, Image, Menu } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function Header() {\n  const logoUrl = process.env.PUBLIC_URL + \"/logo.svg\";\n  return (\n    <Menu\n      className=\"top-nav\"\n      inverted={true}\n      borderless={true}\n      color=\"red\"\n      style={{ borderRadius: 0 }}\n    >\n      <Container>\n        <Menu.Item as={Link} to=\"/\">\n          <Image src={logoUrl} spaced=\"right\" className=\"logo\" />\n          Battle Buddy\n        </Menu.Item>\n        <Menu.Item as={Link} to=\"/pokemon\">\n          Pokemon\n        </Menu.Item>\n        <Menu.Item as={Link} to=\"/types\">\n          Types\n        </Menu.Item>\n        <Menu.Item\n          icon={true}\n          position=\"right\"\n          as=\"a\"\n          href=\"https://github.com/mythmon/battle-buddy\"\n        >\n          <Icon name=\"github\" />\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Grid, Segment } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport function HomePage() {\n  return (\n    <div className=\"home-page\">\n      <Segment vertical={true} className=\"site-info\">\n        <p>\n          Battle Buddy is a tool to help you win battles in Pokemon Let's Go.\n        </p>\n        <p>\n          There are two tools. The first shows{\" \"}\n          <Link to=\"/pokemon\">information about Pokemon</Link>, and what types\n          they are strong and weak against.\n        </p>\n        <p>\n          The second lets you pick <Link to=\"/types\">any types you want</Link>,\n          and it shows what types that combination is strong and weak against\n        </p>\n      </Segment>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container, Header, Icon } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function MissingPage() {\n  return (\n    <Container fluid={true} textAlign=\"center\" className=\"missing-page\">\n      <Header as=\"h1\" icon={true}>\n        <Icon name=\"question circle\" />\n        Page not found\n        <Header.Subheader>We couldn't find that one</Header.Subheader>\n      </Header>\n    </Container>\n  );\n}\n","import { Pokedex } from \"pokeapi-js-wrapper\";\n\nconst pokeapi = new Pokedex({\n  protocol: \"https\",\n});\nexport default pokeapi;\n","import _get from \"lodash-es/get\";\n\nexport function titleCase(s: string) {\n  return s.slice(0, 1).toUpperCase() + s.slice(1);\n}\n\nexport function keyedValue(\n  data: Array<{ [key: string]: any }> = [],\n  search: { [key: string]: any },\n) {\n  return (\n    data.find(d =>\n      Object.keys(search).every(key => _get(d, key) === search[key]),\n    ) || {}\n  );\n}\n","import React from \"react\";\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\n\nexport interface ErrorDetail {\n  description: string | React.ReactElement<any>;\n  source?: { toString: () => string };\n}\n\nexport default function ErrorDisplay({ error }: { error: ErrorDetail }) {\n  if (!error) {\n    return null;\n  }\n  return (\n    <Segment textAlign=\"center\" inverted={true} color=\"red\">\n      <Header icon={true}>\n        <Icon name=\"exclamation\" />\n        Something has gone terribly wrong.\n      </Header>\n      <p>{error.description}</p>\n      {error.source && <p className=\"subtle\">{error.source.toString()}</p>}\n    </Segment>\n  );\n}\n","import React from \"react\";\nimport { Label } from \"semantic-ui-react\";\n\nimport { titleCase } from \"../../utils\";\nimport \"./style.css\";\n\nexport default class TypeBadge extends React.Component<{\n  type: string;\n}> {\n  public render() {\n    const { type } = this.props;\n    return (\n      <Label as=\"span\" className={`type ${type}`}>\n        <span className=\"inner\">{titleCase(type)}</span>\n      </Label>\n    );\n  }\n}\n","import cx from \"classnames\";\nimport { Map } from \"immutable\";\nimport React from \"react\";\nimport { Card, Dimmer, Grid, Label, List } from \"semantic-ui-react\";\n\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport \"./style.css\";\n\ninterface TypeSummaryProps {\n  types: string[];\n}\n\ninterface TypeSummaryState {\n  typeData: { [type: string]: TypeData };\n  loading: boolean;\n}\n\ninterface TypeData {\n  name: string;\n}\n\nexport default class TypeSummary extends React.Component<\n  TypeSummaryProps,\n  TypeSummaryState\n> {\n  public state = {\n    loading: false,\n    typeData: {},\n  };\n\n  public async fetchTypeData(types = this.props.types) {\n    for (const type of types) {\n      if (this.state.typeData[type]) {\n        continue;\n      }\n      this.setState({ loading: true });\n      const newTypeData = { ...this.state.typeData };\n      newTypeData[type] = await pokeapi.getTypeByName(type);\n      this.setState({ typeData: newTypeData });\n    }\n    this.setState({ loading: false });\n  }\n\n  public componentDidMount() {\n    this.fetchTypeData();\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this.fetchTypeData(newProps.types);\n  }\n\n  public calcDamageMultipliers(): Map<string, number> {\n    let multipliers: Map<string, number> = Map();\n    for (const defenseType of this.props.types) {\n      if (!this.state.typeData[defenseType]) {\n        continue;\n      }\n      const { damage_relations } = this.state.typeData[defenseType];\n      for (const { name: attackType } of damage_relations.double_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v * 2);\n      }\n      for (const { name: attackType } of damage_relations.half_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v / 2);\n      }\n      for (const { name: attackType } of damage_relations.no_damage_from) {\n        multipliers = multipliers.set(attackType, 0);\n      }\n    }\n    return multipliers.filter(m => m !== 1);\n  }\n\n  public render() {\n    const { types } = this.props;\n    const { loading } = this.state;\n\n    const multipliers = this.calcDamageMultipliers()\n      .entrySeq()\n      .map(([type, multiplier]) => ({ type, multiplier }))\n      .sort((a, b) => {\n        if (a.multiplier > b.multiplier) {\n          return -1;\n        } else if (a.multiplier < b.multiplier) {\n          return 1;\n        } else {\n          return a.type.localeCompare(b.type);\n        }\n      })\n      .toJS();\n\n    return (\n      <Card fluid={true}>\n        <Card.Content>\n          <Card.Header>\n            {types.length > 0 && (\n              <>\n                {titleCase(types[0])}\n                {types.slice(1).map(t => (\n                  <span key={t}> × {titleCase(t)}</span>\n                ))}\n              </>\n            )}\n          </Card.Header>\n        </Card.Content>\n        <Card.Content>\n          <List>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier >= 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier < 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </List>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\nfunction MultiplierBadge({ by }) {\n  const { text = by.toString(), color, fraction = false } = {\n    \"0\": { text: \"0x\", color: \"black\" },\n    \"0.25\": { text: \"¼\", color: \"purple\", fraction: true },\n    \"0.5\": { text: \"½\", color: \"red\", fraction: true },\n    \"1\": { text: \"1x\" },\n    \"2\": { text: \"2x\", color: \"green\" },\n    \"4\": { text: \"4x\", color: \"blue\" },\n  }[by.toString()];\n\n  return (\n    <Label\n      className={cx(\"multiplier-badge\", { fraction })}\n      circular={true}\n      size=\"large\"\n      color={color}\n    >\n      <span>{text}</span>\n    </Label>\n  );\n}\n","import React from \"react\";\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport { PokemonSpecies, PokemonVariety } from \".\";\nimport ErrorDisplay from \"../components/ErrorDisplay\";\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport TypeSummary from \"../TypesPage/TypeSummary\";\nimport { keyedValue } from \"../utils\";\n\ninterface PokemonDetailsProps {\n  pokemon: string;\n}\n\ninterface PokemonDetailsState {\n  loading: boolean;\n  speciesDetails: null | PokemonSpecies;\n  varieties: { [name: string]: PokemonVariety };\n  chosenVariety: null | string;\n  error: null | {\n    source: any;\n    description: string;\n  };\n}\n\nexport default class PokemonDetails extends React.Component<\n  PokemonDetailsProps,\n  PokemonDetailsState\n> {\n  public state = {\n    chosenVariety: null,\n    error: null,\n    loading: false,\n    speciesDetails: null,\n    varieties: {},\n  };\n\n  public async fetchPokemonDetails({ pokemon } = this.props) {\n    if (!pokemon) {\n      return;\n    }\n    try {\n      this.setState({ loading: true });\n      const speciesDetails = await pokeapi.getPokemonSpeciesByName(pokemon);\n      this.setState({ speciesDetails });\n\n      let chosenVariety = null;\n\n      const varietyPromises = speciesDetails.varieties.map(\n        async ({ is_default, pokemon: variety }) => {\n          if (is_default) {\n            chosenVariety = variety.name;\n          }\n          return pokeapi.getPokemonByName(variety.name);\n        },\n      );\n      const varieties = {};\n      for (const varietyPromise of varietyPromises) {\n        const variety = await varietyPromise;\n        varieties[variety.name] = variety;\n      }\n      if (!chosenVariety) {\n        chosenVariety = await varietyPromises[0].name;\n      }\n\n      this.setState({ loading: false, varieties, chosenVariety, error: null });\n    } catch (err) {\n      // tslint:disable-next-line: no-console\n      console.error(err);\n      this.setState({\n        chosenVariety: null,\n        error: {\n          description: \"Could not load pokemon information.\",\n          source: err,\n        },\n        loading: false,\n        speciesDetails: null,\n        varieties: {},\n      });\n    }\n  }\n\n  public componentDidMount() {\n    this.fetchPokemonDetails();\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this.fetchPokemonDetails(newProps);\n  }\n\n  public render() {\n    const { pokemon } = this.props;\n    const { error, speciesDetails, varieties, chosenVariety } = this.state;\n\n    const variety = varieties && varieties[chosenVariety];\n\n    return (\n      <>\n        {!pokemon && (\n          <Grid.Column width={16}>\n            <Segment placeholder={true}>\n              <Header icon={true}>\n                <Icon name=\"search\" />\n                Search for a defending pokemon to begin\n              </Header>\n            </Segment>\n          </Grid.Column>\n        )}\n        {error && (\n          <Grid.Column width={16}>\n            <ErrorDisplay error={error} />\n          </Grid.Column>\n        )}\n        <Grid.Column width={8}>\n          {speciesDetails && variety && (\n            <PokemonInfo species={speciesDetails} variety={variety} />\n          )}\n        </Grid.Column>\n        <Grid.Column width={8}>\n          {variety && (\n            <TypeSummary types={variety.types.map(t => t.type.name)} />\n          )}\n        </Grid.Column>\n      </>\n    );\n  }\n}\n\nfunction PokemonInfo({ species, variety }) {\n  return (\n    <Card fluid={true}>\n      <Card.Content>\n        {variety && (\n          <Image\n            className=\"pokemon-sprite\"\n            floated=\"left\"\n            src={variety.sprites.front_default}\n          />\n        )}\n        {species && (\n          <>\n            <Card.Header>\n              #\n              {\n                keyedValue(species.pokedex_numbers, {\n                  \"pokedex.name\": \"kanto\",\n                }).entry_number\n              }{\" \"}\n              -{\" \"}\n              {\n                keyedValue(species.names, {\n                  \"language.name\": \"en\",\n                }).name\n              }\n            </Card.Header>\n            <Card.Meta>\n              {\n                keyedValue(species.genera, {\n                  \"language.name\": \"en\",\n                }).genus\n              }\n            </Card.Meta>\n          </>\n        )}\n        {variety &&\n          variety.types.map(({ slot, type: { name } }) => (\n            <TypeBadge key={slot} type={name} />\n          ))}\n        {species && (\n          <Card.Description>\n            {keyedValue(species.flavor_text_entries, {\n              \"language.name\": \"en\",\n              \"version.name\": \"yellow\",\n            }).flavor_text.replace(\"\\u000C\", \" \")}\n          </Card.Description>\n        )}\n      </Card.Content>\n    </Card>\n  );\n}\n","import { History, Location } from \"history\";\nimport _get from \"lodash-es/get\";\nimport React from \"react\";\nimport { match as matchType, withRouter } from \"react-router-dom\";\nimport { Dropdown, Grid, Header, Segment } from \"semantic-ui-react\";\n\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport PokemonDetails from \"./PokemonDetails\";\nimport \"./style.css\";\n\ninterface PokemonPageProps {\n  match: matchType<{ name: string }>;\n  location: Location;\n  history: History;\n}\n\ninterface PokemonPageState {\n  loading: boolean;\n  pokedex: null | PokedexEntry[];\n}\n\ninterface PokedexEntry {\n  entry_number: number;\n  pokemon_species: {\n    name: string;\n  };\n}\n\nclass PokemonPage extends React.Component<PokemonPageProps, PokemonPageState> {\n  public state = {\n    loading: true,\n    pokedex: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handlePokemon = this.handlePokemon.bind(this);\n  }\n\n  public async componentDidMount() {\n    if (this.state.pokedex === null) {\n      this.setState({ loading: true });\n      const data = await pokeapi.getPokedexByName(\"kanto\");\n      this.setState({ loading: false, pokedex: data.pokemon_entries });\n    }\n  }\n\n  public handlePokemon(_: any, { value }: { value: string }) {\n    const { history, match } = this.props;\n    const newUrl = match.path.replace(\":name?\", value);\n    history.push(newUrl);\n  }\n\n  public render() {\n    const { match } = this.props;\n    const { pokedex } = this.state;\n\n    return (\n      <Segment vertical={true}>\n        <Grid stackable={true}>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h2\">Defender Info</Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <PokemonDropdown\n                onChange={this.handlePokemon}\n                pokedex={pokedex}\n                value={match.params.name}\n                placeholder=\"Defending Pokemon\"\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched={true}>\n            <PokemonDetails pokemon={match.params.name} />\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    );\n  }\n}\n\nexport default withRouter(PokemonPage);\n\nfunction PokemonDropdown({\n  onChange,\n  pokedex,\n  value,\n  placeholder,\n}: {\n  onChange?: (ev, el) => void;\n  pokedex: PokedexEntry[];\n  value: string;\n  placeholder?: string;\n}) {\n  let options;\n  if (pokedex) {\n    options = pokedex.map(pokemon => ({\n      key: pokemon.pokemon_species.name,\n      text: titleCase(pokemon.pokemon_species.name),\n      value: pokemon.pokemon_species.name,\n    }));\n  } else {\n    options = [];\n  }\n\n  if (value && !options.some(o => o.value === value)) {\n    options.push({ key: value, text: titleCase(value), value });\n  }\n\n  return (\n    <Dropdown\n      compact={true}\n      fluid={true}\n      placeholder={placeholder}\n      search={true}\n      selection={true}\n      options={options}\n      onChange={onChange}\n      value={value}\n    />\n  );\n}\n\nexport interface PokemonSpecies {\n  name: string;\n  names: PokemonName[];\n  pokedex_numbers: PokedexNumber[];\n}\n\ninterface PokemonName {\n  name: string;\n  language: {\n    name: string;\n  };\n}\n\ninterface PokedexNumber {\n  entry_number: number;\n  pokedex: {\n    name: string;\n  };\n}\n\nexport interface PokemonVariety {\n  name: string;\n}\n","import { History, Location } from \"history\";\nimport React from \"react\";\nimport { match as matchType, withRouter } from \"react-router-dom\";\nimport { Dropdown, Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\nimport ErrorDisplay, { ErrorDetail } from \"../components/ErrorDisplay\";\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport TypeSummary from \"./TypeSummary\";\n\ninterface TypesPageProps {\n  match: matchType<{ types?: string }>;\n  location: Location;\n  history: History;\n}\n\ninterface TypesPageState {\n  error: null | ErrorDetail;\n  typeList: null | PokedexType[];\n}\n\ninterface PokedexType {\n  name: string;\n}\n\nclass TypesPage extends React.Component<TypesPageProps, TypesPageState> {\n  public state = {\n    error: null,\n    typeList: null,\n  };\n\n  public async componentDidMount() {\n    if (this.state.typeList === null) {\n      const data = await pokeapi.getTypesList();\n      this.setState({ typeList: data.results });\n    }\n    this.checkTypes();\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this.checkTypes(newProps);\n  }\n\n  public handleTypes(index) {\n    if (index < 0 || index > 1) {\n      throw new Error(`Invalid index ${index}`);\n    }\n    return (_event, { value }: { value: string }) => {\n      const { match, history } = this.props;\n      let types = (match.params.types || \"\").split(\",\");\n      types[index] = value;\n      types = types.filter(t => !!t);\n      const newUrl = match.path.replace(\":types?\", types.join(\",\"));\n      history.push(newUrl);\n    };\n  }\n\n  public render() {\n    const { typeList, error } = this.state;\n    const types = this.getTypes();\n\n    return (\n      <Segment vertical={true}>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h2\">Defender Info</Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={8}>\n              <TypeDropdown\n                onChange={this.handleTypes(0)}\n                typeList={typeList}\n                value={types[0]}\n                placeholder={\"First Type\"}\n              />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              <TypeDropdown\n                onChange={this.handleTypes(1)}\n                typeList={typeList}\n                value={types[1]}\n                placeholder={\"Second Type\"}\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              {error ? (\n                <ErrorDisplay error={error} />\n              ) : types.length > 0 ? (\n                <>\n                  <div data-types={JSON.stringify(types)} />\n                  <TypeSummary types={types} />\n                </>\n              ) : (\n                <Segment placeholder={true}>\n                  <Header icon={true}>\n                    <Icon name=\"search\" />\n                    Search for a type to begin\n                  </Header>\n                </Segment>\n              )}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    );\n  }\n\n  private getTypes({ match } = this.props) {\n    return (match.params.types || \"\")\n      .split(\",\")\n      .slice(0, 2)\n      .filter(t => !!t);\n  }\n\n  private checkTypes(props = this.props) {\n    const { typeList } = this.state;\n    if (!typeList) {\n      return;\n    }\n    const types = this.getTypes(props);\n    for (const type of types) {\n      if (!typeList.some(typeDefinition => typeDefinition.name === type)) {\n        // tslint:disable-next-line: no-console\n        console.error(\"Invalid type:\", type, \"not included in\", typeList);\n        this.setState({\n          error: {\n            description: (\n              <>\n                <TypeBadge type={type} /> isn't a valid type\n              </>\n            ),\n          },\n        });\n        return;\n      }\n    }\n    this.setState({ error: null });\n  }\n}\n\nexport default withRouter(TypesPage);\n\nfunction TypeDropdown({ value, typeList, onChange, placeholder }) {\n  let options;\n  if (typeList) {\n    options = typeList.map(type => ({\n      key: type.name,\n      text: titleCase(type.name),\n      value: type.name,\n    }));\n  } else {\n    options = [];\n  }\n  if (value && !options.some(o => o.value === value)) {\n    options.push({ key: value, text: titleCase(value), value });\n  }\n  options.sort((a: { text: string }, b: { text: string }) =>\n    a.text.localeCompare(b.text),\n  );\n\n  return (\n    <Dropdown\n      compact={true}\n      fluid={true}\n      placeholder={placeholder}\n      search={true}\n      selection={true}\n      clearable={true}\n      options={options}\n      onChange={onChange}\n      value={value}\n    />\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.css\";\nimport { Container } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport { HomePage } from \"./HomePage\";\nimport MissingPage from \"./MissingPage\";\nimport PokemonPage from \"./PokemonPage\";\nimport TypesPage from \"./TypesPage/index\";\n\nimport \"./style.css\";\n\nexport default class App extends Component {\n  public render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <>\n          <Header />\n          <Container className=\"root\">\n            <Switch>\n              <Route exact={true} path=\"/\" component={HomePage} />\n              <Route path=\"/pokemon/:name?\" component={PokemonPage} />\n              <Route path=\"/types/:types?\" component={TypesPage} />\n              <Route component={MissingPage} />\n            </Switch>\n          </Container>\n          <Footer />\n        </>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line: no-console\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line: no-console\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line: no-console\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line: no-console\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line: no-console\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}