{"version":3,"sources":["utils.ts","pokeapi.ts","components/TypeBadge/index.tsx","components/ErrorDisplay.tsx","TypesPage/TypeSummary.tsx","PokemonPage/PokemonDetails.tsx","PokemonPage/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","titleCase","keyedValue","lodash_es_get__WEBPACK_IMPORTED_MODULE_0__","s","slice","toUpperCase","data","arguments","length","undefined","search","find","Object","keys","every","key","_get","pokeapi","Pokedex","protocol","TypeBadge","type","this","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","as","className","concat","React","Component","ErrorDisplay","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","_ref","error","textAlign","inverted","color","icon","name","description","source","toString","TypeSummary","state","loading","typeData","types","setState","newTypeData","getTypeByName","fetchTypeData","newProps","multipliers","Map","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Symbol","iterator","next","done","defenseType","value","damage_relations","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","double_damage_from","attackType","update","v","err","return","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","half_damage_from","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","no_damage_from","set","filter","m","calcDamageMultipliers","entrySeq","map","_ref7","_ref8","_github_workspace_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","multiplier","sort","b","localeCompare","toJS","react__WEBPACK_IMPORTED_MODULE_11___default","semantic_ui_react__WEBPACK_IMPORTED_MODULE_12__","fluid","Content","Header","Fragment","t","semantic_ui_react__WEBPACK_IMPORTED_MODULE_13__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_14__","Row","Column","width","_ref9","_ref10","Item","_components_TypeBadge__WEBPACK_IMPORTED_MODULE_16__","MultiplierBadge","by","_ref11","_ref12","_ref13","_$025$05$1$2$4$by$","0","text","0.25","fraction","0.5","1","2","4","_$025$05$1$2$4$by$$te","_$025$05$1$2$4$by$$fr","semantic_ui_react__WEBPACK_IMPORTED_MODULE_15__","cx","circular","size","PokemonDetails","chosenVariety","speciesDetails","varieties","pokemon","getPokemonSpeciesByName","varietyPromises","_ref3","asyncToGenerator","regenerator_default","mark","_callee","_ref2","is_default","variety","wrap","_context","prev","abrupt","getPokemonByName","stop","_x","apply","varietyPromise","console","_context2","t1","fetchPokemonDetails","_this$state","react_default","Grid","Segment","placeholder","Icon","PokemonInfo","species","_ref4","Card","Image","floated","src","sprites","front_default","pokedex_numbers","pokedex.name","entry_number","names","language.name","Meta","genera","genus","_ref5","slot","Description","flavor_text_entries","version.name","flavor_text","replace","PokemonPage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","pokedex","handlePokemon","bind","assertThisInitialized","getPokedexByName","pokemon_entries","_","_this$props","history","newUrl","match","path","push","vertical","stackable","PokemonDropdown","onChange","params","stretched","PokemonDetails_PokemonDetails","withRouter","options","pokemon_species","some","o","Dropdown","compact","selection"],"mappings":"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","file":"static/js/4.df1074b1.chunk.js","sourcesContent":["import _get from \"lodash-es/get\";\n\nexport function titleCase(s: string) {\n  return s.slice(0, 1).toUpperCase() + s.slice(1);\n}\n\nexport function keyedValue(\n  data: Array<{ [key: string]: any }> = [],\n  search: { [key: string]: any },\n) {\n  return (\n    data.find(d =>\n      Object.keys(search).every(key => _get(d, key) === search[key]),\n    ) || {}\n  );\n}\n","import { Pokedex } from \"pokeapi-js-wrapper\";\n\nconst pokeapi = new Pokedex({\n  protocol: \"https\",\n});\nexport default pokeapi;\n","import React from \"react\";\nimport { Label } from \"semantic-ui-react\";\n\nimport { titleCase } from \"../../utils\";\nimport \"./style.css\";\n\nexport default class TypeBadge extends React.Component<{\n  type: string;\n}> {\n  public render() {\n    const { type } = this.props;\n    return (\n      <Label as=\"span\" className={`type ${type}`}>\n        <span className=\"inner\">{titleCase(type)}</span>\n      </Label>\n    );\n  }\n}\n","import React from \"react\";\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\n\nexport interface ErrorDetail {\n  description: string | React.ReactElement<any>;\n  source?: { toString: () => string };\n}\n\nexport default function ErrorDisplay({ error }: { error: ErrorDetail }) {\n  if (!error) {\n    return null;\n  }\n  return (\n    <Segment textAlign=\"center\" inverted color=\"red\">\n      <Header icon>\n        <Icon name=\"exclamation\" />\n        Something has gone terribly wrong.\n      </Header>\n      <p>{error.description}</p>\n      {error.source && <p className=\"subtle\">{error.source.toString()}</p>}\n    </Segment>\n  );\n}\n","import cx from \"classnames\";\nimport { Map } from \"immutable\";\nimport React from \"react\";\nimport { Card, Dimmer, Grid, Label, List } from \"semantic-ui-react\";\n\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport \"./style.css\";\n\ninterface TypeSummaryProps {\n  types: string[];\n}\n\ninterface TypeSummaryState {\n  typeData: { [type: string]: TypeData };\n  loading: boolean;\n}\n\ninterface TypeData {\n  name: string;\n}\n\nexport default class TypeSummary extends React.Component<\n  TypeSummaryProps,\n  TypeSummaryState\n> {\n  public state = {\n    loading: false,\n    typeData: {},\n  };\n\n  public async fetchTypeData(types = this.props.types) {\n    for (const type of types) {\n      if (this.state.typeData[type]) {\n        continue;\n      }\n      this.setState({ loading: true });\n      const newTypeData = { ...this.state.typeData };\n      newTypeData[type] = await pokeapi.getTypeByName(type);\n      this.setState({ typeData: newTypeData });\n    }\n    this.setState({ loading: false });\n  }\n\n  public componentDidMount() {\n    this.fetchTypeData();\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this.fetchTypeData(newProps.types);\n  }\n\n  public calcDamageMultipliers(): Map<string, number> {\n    let multipliers: Map<string, number> = Map();\n    for (const defenseType of this.props.types) {\n      if (!this.state.typeData[defenseType]) {\n        continue;\n      }\n      const { damage_relations } = this.state.typeData[defenseType];\n      for (const { name: attackType } of damage_relations.double_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v * 2);\n      }\n      for (const { name: attackType } of damage_relations.half_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v / 2);\n      }\n      for (const { name: attackType } of damage_relations.no_damage_from) {\n        multipliers = multipliers.set(attackType, 0);\n      }\n    }\n    return multipliers.filter(m => m !== 1);\n  }\n\n  public render() {\n    const { types } = this.props;\n    const { loading } = this.state;\n\n    const multipliers = this.calcDamageMultipliers()\n      .entrySeq()\n      .map(([type, multiplier]) => ({ type, multiplier }))\n      .sort((a, b) => {\n        if (a.multiplier > b.multiplier) {\n          return -1;\n        } else if (a.multiplier < b.multiplier) {\n          return 1;\n        } else {\n          return a.type.localeCompare(b.type);\n        }\n      })\n      .toJS();\n\n    return (\n      <Card fluid>\n        <Card.Content>\n          <Card.Header>\n            {types.length > 0 && (\n              <>\n                {titleCase(types[0])}\n                {types.slice(1).map(t => (\n                  <span key={t}> × {titleCase(t)}</span>\n                ))}\n              </>\n            )}\n          </Card.Header>\n        </Card.Content>\n        <Card.Content>\n          <List>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier >= 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier < 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </List>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\nfunction MultiplierBadge({ by }) {\n  const { text = by.toString(), color, fraction = false } = {\n    \"0\": { text: \"0x\", color: \"black\" },\n    \"0.25\": { text: \"¼\", color: \"purple\", fraction: true },\n    \"0.5\": { text: \"½\", color: \"red\", fraction: true },\n    \"1\": { text: \"1x\" },\n    \"2\": { text: \"2x\", color: \"green\" },\n    \"4\": { text: \"4x\", color: \"blue\" },\n  }[by.toString()];\n\n  return (\n    <Label\n      className={cx(\"multiplier-badge\", { fraction })}\n      circular\n      size=\"large\"\n      color={color}\n    >\n      <span>{text}</span>\n    </Label>\n  );\n}\n","import React from \"react\";\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport { PokemonSpecies, PokemonVariety } from \".\";\nimport ErrorDisplay from \"../components/ErrorDisplay\";\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport TypeSummary from \"../TypesPage/TypeSummary\";\nimport { keyedValue } from \"../utils\";\n\ninterface PokemonDetailsProps {\n  pokemon: string;\n}\n\ninterface PokemonDetailsState {\n  loading: boolean;\n  speciesDetails: null | PokemonSpecies;\n  varieties: { [name: string]: PokemonVariety };\n  chosenVariety: null | string;\n  error: null | {\n    source: any;\n    description: string;\n  };\n}\n\nexport default class PokemonDetails extends React.Component<\n  PokemonDetailsProps,\n  PokemonDetailsState\n> {\n  public state = {\n    chosenVariety: null,\n    error: null,\n    loading: false,\n    speciesDetails: null,\n    varieties: {},\n  };\n\n  public async fetchPokemonDetails({ pokemon } = this.props) {\n    if (!pokemon) {\n      this.setState({\n        chosenVariety: null,\n        speciesDetails: null,\n      });\n      return;\n    }\n    try {\n      this.setState({ loading: true });\n      const speciesDetails = await pokeapi.getPokemonSpeciesByName(pokemon);\n      this.setState({ speciesDetails });\n\n      let chosenVariety = null;\n\n      const varietyPromises = speciesDetails.varieties.map(\n        async ({ is_default, pokemon: variety }) => {\n          if (is_default) {\n            chosenVariety = variety.name;\n          }\n          return pokeapi.getPokemonByName(variety.name);\n        },\n      );\n      const varieties = {};\n      for (const varietyPromise of varietyPromises) {\n        const variety = await varietyPromise;\n        varieties[variety.name] = variety;\n      }\n      if (!chosenVariety) {\n        chosenVariety = await varietyPromises[0].name;\n      }\n\n      this.setState({ loading: false, varieties, chosenVariety, error: null });\n    } catch (err) {\n      // tslint:disable-next-line: no-console\n      console.error(err);\n      this.setState({\n        chosenVariety: null,\n        error: {\n          description: \"Could not load pokemon information.\",\n          source: err,\n        },\n        loading: false,\n        speciesDetails: null,\n        varieties: {},\n      });\n    }\n  }\n\n  public componentDidMount() {\n    this.fetchPokemonDetails();\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this.fetchPokemonDetails(newProps);\n  }\n\n  public render() {\n    const { pokemon } = this.props;\n    const { error, speciesDetails, varieties, chosenVariety } = this.state;\n\n    const variety = varieties && varieties[chosenVariety];\n\n    return (\n      <>\n        {!pokemon && (\n          <Grid.Column width={16}>\n            <Segment placeholder>\n              <Header icon>\n                <Icon name=\"search\" />\n                Search for a defending pokemon to begin\n              </Header>\n            </Segment>\n          </Grid.Column>\n        )}\n        {error && (\n          <Grid.Column width={16}>\n            <ErrorDisplay error={error} />\n          </Grid.Column>\n        )}\n        <Grid.Column width={8}>\n          {speciesDetails && variety && (\n            <PokemonInfo species={speciesDetails} variety={variety} />\n          )}\n        </Grid.Column>\n        <Grid.Column width={8}>\n          {variety && (\n            <TypeSummary types={variety.types.map(t => t.type.name)} />\n          )}\n        </Grid.Column>\n      </>\n    );\n  }\n}\n\nfunction PokemonInfo({ species, variety }) {\n  return (\n    <Card fluid>\n      <Card.Content>\n        {variety && (\n          <Image\n            className=\"pokemon-sprite\"\n            floated=\"left\"\n            src={variety.sprites.front_default}\n          />\n        )}\n        {species && (\n          <>\n            <Card.Header>\n              #\n              {\n                keyedValue(species.pokedex_numbers, {\n                  \"pokedex.name\": \"kanto\",\n                }).entry_number\n              }{\" \"}\n              -{\" \"}\n              {\n                keyedValue(species.names, {\n                  \"language.name\": \"en\",\n                }).name\n              }\n            </Card.Header>\n            <Card.Meta>\n              {\n                keyedValue(species.genera, {\n                  \"language.name\": \"en\",\n                }).genus\n              }\n            </Card.Meta>\n          </>\n        )}\n        {variety &&\n          variety.types.map(({ slot, type: { name } }) => (\n            <TypeBadge key={slot} type={name} />\n          ))}\n        {species && (\n          <Card.Description>\n            {keyedValue(species.flavor_text_entries, {\n              \"language.name\": \"en\",\n              \"version.name\": \"yellow\",\n            }).flavor_text.replace(\"\\u000C\", \" \")}\n          </Card.Description>\n        )}\n      </Card.Content>\n    </Card>\n  );\n}\n","import { History, Location } from \"history\";\nimport _get from \"lodash-es/get\";\nimport React from \"react\";\nimport { match as matchType, withRouter } from \"react-router-dom\";\nimport { Dropdown, Grid, Header, Segment } from \"semantic-ui-react\";\n\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport PokemonDetails from \"./PokemonDetails\";\nimport \"./style.css\";\n\ninterface PokemonPageProps {\n  match: matchType<{ name: string }>;\n  location: Location;\n  history: History;\n}\n\ninterface PokemonPageState {\n  loading: boolean;\n  pokedex: null | PokedexEntry[];\n}\n\ninterface PokedexEntry {\n  entry_number: number;\n  pokemon_species: {\n    name: string;\n  };\n}\n\nclass PokemonPage extends React.Component<PokemonPageProps, PokemonPageState> {\n  public state = {\n    loading: true,\n    pokedex: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handlePokemon = this.handlePokemon.bind(this);\n  }\n\n  public async componentDidMount() {\n    if (this.state.pokedex === null) {\n      this.setState({ loading: true });\n      const data = await pokeapi.getPokedexByName(\"kanto\");\n      this.setState({ loading: false, pokedex: data.pokemon_entries });\n    }\n  }\n\n  public handlePokemon(_: any, { value }: { value: string }) {\n    const { history, match } = this.props;\n    const newUrl = match.path.replace(\":name?\", value);\n    history.push(newUrl);\n  }\n\n  public render() {\n    const { match } = this.props;\n    const { pokedex } = this.state;\n\n    return (\n      <Segment vertical>\n        <Grid stackable>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h2\">Defender Info</Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <PokemonDropdown\n                onChange={this.handlePokemon}\n                pokedex={pokedex}\n                value={match.params.name}\n                placeholder=\"Defending Pokemon\"\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched>\n            <PokemonDetails pokemon={match.params.name} />\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    );\n  }\n}\n\nexport default withRouter(PokemonPage);\n\nfunction PokemonDropdown({\n  onChange,\n  pokedex,\n  value,\n  placeholder,\n}: {\n  onChange?: (ev, el) => void;\n  pokedex: PokedexEntry[];\n  value: string;\n  placeholder?: string;\n}) {\n  let options;\n  if (pokedex) {\n    options = pokedex.map(pokemon => ({\n      key: pokemon.pokemon_species.name,\n      text: titleCase(pokemon.pokemon_species.name),\n      value: pokemon.pokemon_species.name,\n    }));\n  } else {\n    options = [];\n  }\n\n  if (value && !options.some(o => o.value === value)) {\n    options.push({ key: value, text: titleCase(value), value });\n  }\n\n  return (\n    <Dropdown\n      compact\n      fluid\n      placeholder={placeholder}\n      search\n      selection\n      options={options}\n      onChange={onChange}\n      value={value}\n    />\n  );\n}\n\nexport interface PokemonSpecies {\n  name: string;\n  names: PokemonName[];\n  pokedex_numbers: PokedexNumber[];\n}\n\ninterface PokemonName {\n  name: string;\n  language: {\n    name: string;\n  };\n}\n\ninterface PokedexNumber {\n  entry_number: number;\n  pokedex: {\n    name: string;\n  };\n}\n\nexport interface PokemonVariety {\n  name: string;\n}\n"],"sourceRoot":""}