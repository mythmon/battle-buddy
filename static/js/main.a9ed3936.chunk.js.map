{"version":3,"sources":["components/Footer/index.tsx","components/Header/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","react_default","a","createElement","Segment","vertical","secondary","size","className","href","Header","Menu","inverted","borderless","color","style","borderRadius","Container","Item","as","Link","to","Image","src","process","spaced","icon","position","Icon","name","MissingPage","React","lazy","__webpack_require__","e","then","bind","HomePage","PokemonPage","Promise","all","TypesPage","Fallback","Placeholder","Line","App","BrowserRouter","basename","Fragment","Suspense","fallback","Switch","Route","exact","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9ed3936.chunk.js","sourcesContent":["import React from \"react\";\nimport { Icon, Segment } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function Footer() {\n  return (\n    <Segment vertical secondary size=\"mini\" className=\"site-footer\">\n      <p>\n        Data is from <a href=\"https://pokeapi.co/\">The PokéAPI</a>. Pokémon and\n        Pokémon character names are trademarks of Nintendo.\n      </p>\n    </Segment>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Icon, Image, Menu } from \"semantic-ui-react\";\n\nimport \"./style.css\";\n\nexport default function Header() {\n  const logoUrl = process.env.PUBLIC_URL + \"/logo.svg\";\n  return (\n    <Menu\n      className=\"top-nav\"\n      inverted\n      borderless\n      color=\"red\"\n      style={{ borderRadius: 0 }}\n    >\n      <Container>\n        <Menu.Item as={Link} to=\"/\">\n          <Image src={logoUrl} spaced=\"right\" className=\"logo\" />\n          Battle Buddy\n        </Menu.Item>\n        <Menu.Item as={Link} to=\"/pokemon\">\n          Pokemon\n        </Menu.Item>\n        <Menu.Item as={Link} to=\"/types\">\n          Types\n        </Menu.Item>\n        <Menu.Item\n          icon\n          position=\"right\"\n          as=\"a\"\n          href=\"https://github.com/mythmon/battle-buddy\"\n        >\n          <Icon name=\"github\" />\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Container, Placeholder } from \"semantic-ui-react\";\n\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\n\nimport \"semantic-ui-css/semantic.css\";\nimport \"./style.css\";\n\n// Set up lazy loaded pages. React will instruct the browser to prefetch them,\n// meaning \"resource is probably needed for some navigation in the future\".\n\n// tslint:disable:variable-name\nconst MissingPage = React.lazy(() =>\n  import(/* webpackPrefetch: true */ \"./MissingPage\"),\n);\nconst HomePage = React.lazy(() =>\n  import(/* webpackPrefetch: true */ \"./HomePage\"),\n);\nconst PokemonPage = React.lazy(() =>\n  import(/* webpackPrefetch: true */ \"./PokemonPage\"),\n);\nconst TypesPage = React.lazy(() =>\n  import(/* webpackPrefetch: true */ \"./TypesPage/index\"),\n);\n// tslint:enable:variable-name\n\nfunction Fallback() {\n  return (\n    <Placeholder>\n      <Placeholder.Header />\n      <Placeholder.Line />\n      <Placeholder.Line />\n    </Placeholder>\n  );\n}\n\nexport default class App extends Component {\n  public render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <>\n          <Header />\n          <Container className=\"root\">\n            <React.Suspense fallback={<Fallback />}>\n              <Switch>\n                <Route exact path=\"/\">\n                  <HomePage />\n                </Route>\n                <Route path=\"/pokemon/:name?\">\n                  <PokemonPage />\n                </Route>\n                <Route path=\"/types/:types?\">\n                  <TypesPage />\n                </Route>\n                <Route>\n                  <MissingPage />\n                </Route>\n              </Switch>\n            </React.Suspense>\n          </Container>\n          <Footer />\n        </>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line: no-console\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line: no-console\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line: no-console\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line: no-console\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line: no-console\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}