{"version":3,"sources":["utils.ts","pokedex.ts","TypesPage/index.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["titleCase","s","slice","toUpperCase","pokedex","Pokedex","protocol","TypesPage","state","typeList","types","this","getTypesList","data","setState","results","index","_this2","Error","concat","e","_ref","value","newTypes","filter","t","length","push","_this$state","react_default","a","createElement","Loader","active","Container","Grid","Row","Column","Header","as","width","TypeDropdown","onChange","handleTypes","placeholder","TypesPage_TypeSummary","React","Component","_ref2","typeDropdownOptions","map","type","key","name","text","Dropdown","compact","fluid","search","selection","clearable","options","TypeSummary","typeData","loading","props","newTypeData","getTypeByName","fetchTypeData","newProps","multipliers","Map","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","defenseType","damage_relations","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","double_damage_from","attackType","update","v","err","return","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","half_damage_from","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","no_damage_from","set","calcDamageMultipliers","entrySeq","_ref9","_ref10","Object","slicedToArray","multiplier","sort","b","localeCompare","toJS","Card","Dimmer","Content","Fragment","_ref11","Menu","className","inverted","borderless","color","style","borderRadius","Item","Link","to","Image","src","process","spaced","App","BrowserRouter","basename","src_components_Header","Switch","Route","exact","path","Redirect","component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70f7b174.chunk.js","sourcesContent":["export function titleCase(s: string) {\n  return s.slice(0, 1).toUpperCase() + s.slice(1);\n}\n","import { Pokedex } from \"pokeapi-js-wrapper\";\n\nconst pokedex = new Pokedex({\n  protocol: \"https\"\n});\nexport default pokedex;\n","import React from \"react\";\nimport {\n  Container,\n  Loader,\n  Dropdown,\n  Grid,\n  Header,\n  Card,\n  Dimmer\n} from \"semantic-ui-react\";\nimport { Map } from \"immutable\";\n\nimport { titleCase } from \"../utils\";\nimport pokedex from \"../pokedex\";\n\ninterface TypesPageState {\n  typeList: null | Array<PokedexType>;\n  types: Array<string>;\n}\n\ninterface PokedexType {\n  name: string;\n}\n\nclass TypesPage extends React.Component<{}, TypesPageState> {\n  state = {\n    typeList: null,\n    types: [null, null]\n  };\n\n  async componentDidMount() {\n    if (this.state.typeList === null) {\n      const data = await pokedex.getTypesList();\n      this.setState({ typeList: data.results });\n    }\n  }\n\n  handleTypes(index) {\n    if (index < 0 || index > 1) {\n      throw new Error(`Invalid index ${index}`);\n    }\n    return (e, { value }: { value: string }) => {\n      this.setState(state => {\n        state.types[index] = value;\n        let newTypes = state.types.filter(t => !!t);\n        while (newTypes.length < 2) {\n          newTypes.push(null);\n        }\n        return { types: newTypes };\n      });\n    };\n  }\n\n  render() {\n    const { types, typeList } = this.state;\n\n    if (typeList === null) {\n      return <Loader active />;\n    }\n\n    return (\n      <Container>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h2\">Defender</Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={8}>\n              <TypeDropdown\n                onChange={this.handleTypes(0)}\n                typeList={typeList}\n                value={types[0]}\n                placeholder={\"First Type\"}\n              />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              <TypeDropdown\n                onChange={this.handleTypes(1)}\n                typeList={typeList}\n                value={types[1]}\n                placeholder={\"Second Type\"}\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <TypeSummary types={types.filter(t => !!t)} />\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nfunction TypeDropdown({ value, typeList, onChange, placeholder }) {\n  const typeDropdownOptions = typeList.map(type => ({\n    key: type.name,\n    value: type.name,\n    text: titleCase(type.name)\n  }));\n\n  return (\n    <Dropdown\n      key=\"first-type\"\n      compact\n      fluid\n      placeholder={placeholder}\n      search\n      selection\n      clearable\n      options={typeDropdownOptions}\n      onChange={onChange}\n      value={value}\n    />\n  );\n}\n\ninterface TypeSummaryProps {\n  types: Array<string>;\n}\n\ninterface TypeSummaryState {\n  typeData: { [type: string]: TypeData };\n  loading: boolean;\n}\n\ninterface TypeData {}\n\nclass TypeSummary extends React.Component<TypeSummaryProps, TypeSummaryState> {\n  state = {\n    typeData: {},\n    loading: false\n  };\n\n  async fetchTypeData(types = this.props.types) {\n    for (const type of types) {\n      if (this.state.typeData[type]) {\n        continue;\n      }\n      this.setState({ loading: true });\n      let newTypeData = { ...this.state.typeData };\n      newTypeData[type] = await pokedex.getTypeByName(type);\n      this.setState({ typeData: newTypeData });\n    }\n    this.setState({ loading: false });\n  }\n\n  componentDidMount() {\n    this.fetchTypeData();\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.fetchTypeData(newProps.types);\n  }\n\n  calcDamageMultipliers(): Map<string, number> {\n    let multipliers: Map<string, number> = Map();\n    for (const defenseType of this.props.types) {\n      if (!this.state.typeData[defenseType]) {\n        continue;\n      }\n      let { damage_relations } = this.state.typeData[defenseType];\n      for (const { name: attackType } of damage_relations.double_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v * 2);\n      }\n      for (const { name: attackType } of damage_relations.half_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v / 2);\n      }\n      for (const { name: attackType } of damage_relations.no_damage_from) {\n        multipliers = multipliers.set(attackType, 0);\n      }\n    }\n    return multipliers;\n  }\n\n  render() {\n    const { types } = this.props;\n    const { loading } = this.state;\n\n    let multipliers = this.calcDamageMultipliers()\n      .entrySeq()\n      .map(([type, multiplier]) => ({ type, multiplier }))\n      .sort((a, b) => {\n        if (a.multiplier > b.multiplier) {\n          return -1;\n        } else if (a.multiplier < b.multiplier) {\n          return 1;\n        } else {\n          return a.type.localeCompare(b.type);\n        }\n      })\n      .toJS();\n\n    return (\n      <Grid.Row>\n        <Grid.Column>\n          <Card fluid>\n            <Dimmer active={loading}>\n              <Loader active={loading} />\n            </Dimmer>\n            <Card.Content>\n              <Card.Header>\n                {types.length > 0 && (\n                  <>\n                    {titleCase(types[0])}\n                    {types.slice(1).map(t => (\n                      <span key={t}> × {titleCase(t)}</span>\n                    ))}\n                  </>\n                )}\n              </Card.Header>\n            </Card.Content>\n            <Card.Content>\n              <ul>\n                {multipliers.map(({ type, multiplier }) => (\n                  <li key={type}>\n                    {type}: {multiplier}x\n                  </li>\n                ))}\n              </ul>\n            </Card.Content>\n          </Card>\n        </Grid.Column>\n      </Grid.Row>\n    );\n  }\n}\n\nexport default TypesPage;\n","import React from \"react\";\nimport { Image, Menu, Container } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Header.css\";\n\nfunction Header() {\n  const logoUrl = process.env.PUBLIC_URL + \"/logo.svg\";\n  return (\n    <Menu\n      className=\"top-nav\"\n      inverted\n      borderless\n      color=\"red\"\n      style={{ borderRadius: 0 }}\n    >\n      <Container>\n        <Menu.Item as={Link} to=\"/\">\n          <Image src={logoUrl} spaced=\"right\" className=\"logo\" />\n          Battle Buddy\n        </Menu.Item>\n        <Menu.Item as={Link} to=\"/types\">\n          Types\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.css\";\nimport \"./App.css\";\nimport TypesPage from \"./TypesPage/index\";\nimport Header from \"./components/Header\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\">\n              <Redirect to=\"/types\" />\n            </Route>\n            <Route path=\"/types\" component={TypesPage} />\n          </Switch>\n        </>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}