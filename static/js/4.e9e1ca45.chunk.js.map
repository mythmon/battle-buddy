{"version":3,"sources":["utils.ts","pokeapi.ts","components/TypeBadge/index.tsx","components/ErrorDisplay.tsx","TypesPage/TypeSummary.tsx","PokemonPage/PokemonDetails.tsx","PokemonPage/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","titleCase","keyedValue","lodash_es_get__WEBPACK_IMPORTED_MODULE_0__","s","split","map","p","slice","toUpperCase","join","data","arguments","length","undefined","search","find","Object","keys","every","key","_get","pokeapi","Pokedex","protocol","TypeBadge","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","_utils__WEBPACK_IMPORTED_MODULE_3__","_ref","type","a","createElement","as","className","concat","Placeholder","ErrorDisplay","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","error","textAlign","inverted","color","icon","name","description","source","toString","TypeSummary","state","loading","typeData","this","props","types","setState","newTypeData","getTypeByName","fetchTypeData","newProps","multipliers","Map","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Symbol","iterator","next","done","defenseType","value","damage_relations","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","double_damage_from","attackType","update","v","err","return","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","half_damage_from","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","no_damage_from","set","filter","m","react__WEBPACK_IMPORTED_MODULE_11___default","calcDamageMultipliers","entrySeq","_ref8","_ref9","_github_workspace_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","multiplier","sort","b","localeCompare","toJS","semantic_ui_react__WEBPACK_IMPORTED_MODULE_12__","fluid","Content","Header","Fragment","t","semantic_ui_react__WEBPACK_IMPORTED_MODULE_13__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_14__","Row","Column","width","_ref10","_ref11","Item","_components_TypeBadge__WEBPACK_IMPORTED_MODULE_17__","MultiplierBadge","by","_ref12","_ref13","React","Component","semantic_ui_react__WEBPACK_IMPORTED_MODULE_15__","column","idx","multiplierDisplayData","0","text","0.25","fraction","0.5","1","2","4","_ref14","_multiplierDisplayDat","_multiplierDisplayDat2","_multiplierDisplayDat3","semantic_ui_react__WEBPACK_IMPORTED_MODULE_16__","cx","circular","size","Image","PokemonDetails","speciesDetails","varieties","pokemon","getPokemonSpeciesByName","varietyPromises","_ref3","asyncToGenerator","regenerator_default","mark","_callee","_ref2","varietyName","wrap","_context","prev","abrupt","getPokemonByName","stop","_x","apply","varietyPromise","variety","console","_context2","t1","fetchPokemonDetails","_this$state","react_default","Grid","Segment","placeholder","Icon","values","PokemonInfo","species","_ref4","defaultVariety","is_default","_React$useState","useState","_React$useState2","slicedToArray","setVarietyName","useEffect","entry_number","pokedex_numbers","pokedex.name","speciesName","names","language.name","genus","genera","Card","sprites","front_default","floated","src","Meta","_ref5","slot","Description","flavor_text_entries","version.name","flavor_text","replace","Form","Group","inline","displayName","trim","Radio","label","checked","onChange","Line","Paragraph","PokemonPage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","pokedex","handlePokemon","bind","assertThisInitialized","getPokedexByName","pokemon_entries","_","_this$props","history","newUrl","match","path","push","vertical","stackable","PokemonDropdown","params","stretched","PokemonDetails_PokemonDetails","withRouter","options","pokemon_species","some","o","Dropdown","compact","selection"],"mappings":"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","file":"static/js/4.e9e1ca45.chunk.js","sourcesContent":["import _get from \"lodash-es/get\";\n\nexport function titleCase(s: string): string {\n  return s\n    .split(\" \")\n    .map(p => p.slice(0, 1).toUpperCase() + p.slice(1))\n    .join(\" \");\n}\n\nexport function keyedValue(\n  data: Array<{ [key: string]: any }> = [],\n  search: { [key: string]: any },\n): any {\n  return (\n    data.find(d =>\n      Object.keys(search).every(key => _get(d, key) === search[key]),\n    ) || {}\n  );\n}\n","import { Pokedex } from \"pokeapi-js-wrapper\";\n\nconst pokeapi = new Pokedex({\n  protocol: \"https\",\n});\nexport default pokeapi;\n","import React from \"react\";\nimport { Label, Placeholder } from \"semantic-ui-react\";\n\nimport { titleCase } from \"../../utils\";\nimport \"./style.css\";\n\ninterface TypeBadgeProps {\n  type: string;\n}\n\nexport default function TypeBadge({ type }: TypeBadgeProps) {\n  return (\n    <Label as=\"span\" className={`type ${type}`}>\n      <span className=\"inner\">{titleCase(type)}</span>\n    </Label>\n  );\n}\n\nTypeBadge.Placeholder = () => {\n  return <Placeholder className=\"type placeholder\" as=\"span\" />;\n};\n","import React from \"react\";\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\n\nexport interface ErrorDetail {\n  description: string | React.ReactElement<any>;\n  source?: { toString: () => string };\n}\n\nexport default function ErrorDisplay({ error }: { error: ErrorDetail }) {\n  if (!error) {\n    return null;\n  }\n  return (\n    <Segment textAlign=\"center\" inverted color=\"red\">\n      <Header icon>\n        <Icon name=\"exclamation\" />\n        Something has gone terribly wrong.\n      </Header>\n      <p>{error.description}</p>\n      {error.source && <p className=\"subtle\">{error.source.toString()}</p>}\n    </Segment>\n  );\n}\n","import cx from \"classnames\";\nimport { Map } from \"immutable\";\nimport React from \"react\";\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Label,\n  List,\n  Placeholder,\n} from \"semantic-ui-react\";\n\nimport { PokemonType } from \"pokeapi-js-wrapper\";\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport \"./style.css\";\n\ninterface TypeSummaryProps {\n  types: Array<string>;\n}\n\ninterface TypeCollection {\n  [name: string]: PokemonType;\n}\n\ninterface TypeSummaryState {\n  typeData: TypeCollection;\n  loading: boolean;\n}\n\nexport default class TypeSummary extends React.Component<\n  TypeSummaryProps,\n  TypeSummaryState\n> {\n  // tslint:disable-next-line:variable-name\n  public static Placeholder = () => {\n    return (\n      <Card fluid>\n        <Placeholder>\n          <Card.Content>\n            <Card.Header>\n              <Placeholder.Header />\n            </Card.Header>\n          </Card.Content>\n          <Card.Content>\n            <List>\n              <Grid>\n                <Grid.Row>\n                  {[0, 1].map(column => (\n                    <Grid.Column key={column} width={8}>\n                      {[0, 1, 2].map(idx => (\n                        <List.Item key={idx} className=\"type-multiplier\">\n                          <TypeBadge.Placeholder />\n                          <MultiplierBadge.Placeholder />\n                        </List.Item>\n                      ))}\n                    </Grid.Column>\n                  ))}\n                </Grid.Row>\n              </Grid>\n            </List>\n          </Card.Content>\n        </Placeholder>\n      </Card>\n    );\n  };\n\n  public state = {\n    loading: false,\n    typeData: {},\n  };\n\n  public async fetchTypeData({ types }: TypeSummaryProps = this.props) {\n    const { typeData }: { typeData: TypeCollection } = this.state;\n    for (const type of types) {\n      if (typeData[type]) {\n        continue;\n      }\n      this.setState({ loading: true });\n      const newTypeData: TypeCollection = { ...this.state.typeData };\n      newTypeData[type] = await pokeapi.getTypeByName(type);\n      this.setState({ typeData: newTypeData });\n    }\n    this.setState({ loading: false });\n  }\n\n  public componentDidMount() {\n    this.fetchTypeData();\n  }\n\n  public componentWillReceiveProps(newProps: TypeSummaryProps) {\n    this.fetchTypeData(newProps);\n  }\n\n  public calcDamageMultipliers(): Map<string, number> {\n    const { typeData }: { typeData: TypeCollection } = this.state;\n    let multipliers: Map<string, number> = Map();\n    for (const defenseType of this.props.types) {\n      if (!typeData[defenseType]) {\n        continue;\n      }\n      const { damage_relations } = typeData[defenseType];\n      for (const { name: attackType } of damage_relations.double_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v * 2);\n      }\n      for (const { name: attackType } of damage_relations.half_damage_from) {\n        multipliers = multipliers.update(attackType, 1, (v: number) => v / 2);\n      }\n      for (const { name: attackType } of damage_relations.no_damage_from) {\n        multipliers = multipliers.set(attackType, 0);\n      }\n    }\n    return multipliers.filter(m => m !== 1);\n  }\n\n  public render() {\n    const { types } = this.props;\n    const { loading } = this.state;\n\n    if (loading) {\n      return <TypeSummary.Placeholder />;\n    }\n\n    const multipliers = this.calcDamageMultipliers()\n      .entrySeq()\n      .map(([type, multiplier]) => ({ type, multiplier }))\n      .sort((a, b) => {\n        if (a.multiplier > b.multiplier) {\n          return -1;\n        } else if (a.multiplier < b.multiplier) {\n          return 1;\n        } else {\n          return a.type.localeCompare(b.type);\n        }\n      })\n      .toJS();\n\n    return (\n      <Card fluid>\n        <Card.Content>\n          <Card.Header>\n            {types.length > 0 && (\n              <>\n                {titleCase(types[0])}\n                {types.slice(1).map(t => (\n                  <span key={t}> × {titleCase(t)}</span>\n                ))}\n              </>\n            )}\n          </Card.Header>\n        </Card.Content>\n        <Card.Content>\n          <List>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier >= 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n                <Grid.Column width={8}>\n                  {multipliers\n                    .filter(({ multiplier }) => multiplier < 1)\n                    .map(({ type, multiplier }) => (\n                      <List.Item key={type} className=\"type-multiplier\">\n                        <TypeBadge type={type} />\n                        <MultiplierBadge by={multiplier} />\n                      </List.Item>\n                    ))}\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </List>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\ntype semanticUiColor = \"black\" | \"purple\" | \"red\" | \"green\" | \"blue\";\nconst multiplierDisplayData: {\n  [mult: string]: { text: string; color?: semanticUiColor; fraction?: boolean };\n} = {\n  \"0\": { text: \"0x\", color: \"black\" },\n  \"0.25\": { text: \"¼\", color: \"purple\", fraction: true },\n  \"0.5\": { text: \"½\", color: \"red\", fraction: true },\n  \"1\": { text: \"1x\" },\n  \"2\": { text: \"2x\", color: \"green\" },\n  \"4\": { text: \"4x\", color: \"blue\" },\n};\n\nfunction MultiplierBadge({ by }: { by: number }) {\n  const {\n    text = by.toString(),\n    color,\n    fraction = false,\n  } = multiplierDisplayData[by.toString()];\n\n  return (\n    <Label\n      className={cx(\"multiplier-badge\", { fraction })}\n      circular\n      size=\"large\"\n      color={color}\n    >\n      <span>{text}</span>\n    </Label>\n  );\n}\n\nMultiplierBadge.Placeholder = () => {\n  return <Placeholder.Image className=\"multiplier-badge placeholder\" />;\n};\n","import React, { Dispatch, SetStateAction, useEffect } from \"react\";\nimport {\n  Card,\n  Dimmer,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Placeholder,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport {\n  PokemonSpecies,\n  PokemonTypeSlot,\n  PokemonVariety,\n  PokemonVarietyPointer,\n} from \"pokeapi-js-wrapper\";\nimport ErrorDisplay from \"../components/ErrorDisplay\";\nimport TypeBadge from \"../components/TypeBadge\";\nimport pokeapi from \"../pokeapi\";\nimport TypeSummary from \"../TypesPage/TypeSummary\";\nimport { keyedValue, titleCase } from \"../utils\";\n\ninterface PokemonDetailsProps {\n  pokemon: string;\n}\n\ninterface PokemonDetailsState {\n  loading: boolean;\n  speciesDetails: null | PokemonSpecies;\n  varieties: { [name: string]: PokemonVariety };\n  error: null | {\n    source: any;\n    description: string;\n  };\n}\n\nexport default class PokemonDetails extends React.Component<\n  PokemonDetailsProps,\n  PokemonDetailsState\n> {\n  public state = {\n    error: null,\n    loading: false,\n    speciesDetails: null,\n    varieties: {},\n  };\n\n  public async fetchPokemonDetails({ pokemon } = this.props) {\n    if (!pokemon) {\n      this.setState({\n        speciesDetails: null,\n      });\n      return;\n    }\n    try {\n      this.setState({ loading: true });\n      const speciesDetails = await pokeapi.getPokemonSpeciesByName(pokemon);\n      this.setState({ speciesDetails, varieties: {} });\n\n      const varietyPromises = speciesDetails.varieties.map(\n        async ({ pokemon: { name: varietyName } }: PokemonVarietyPointer) => {\n          return pokeapi.getPokemonByName(varietyName);\n        },\n      );\n      const varieties: { [name: string]: PokemonVariety } = {};\n      for (const varietyPromise of varietyPromises) {\n        const variety = await varietyPromise;\n        varieties[variety.name] = variety;\n      }\n\n      this.setState({ loading: false, varieties, error: null });\n    } catch (err) {\n      // tslint:disable-next-line: no-console\n      console.error(err);\n      this.setState({\n        error: {\n          description: \"Could not load pokemon information.\",\n          source: err,\n        },\n        loading: false,\n        speciesDetails: null,\n        varieties: {},\n      });\n    }\n  }\n\n  public componentDidMount() {\n    this.fetchPokemonDetails();\n  }\n\n  public componentWillReceiveProps(newProps: PokemonDetailsProps) {\n    this.fetchPokemonDetails(newProps);\n  }\n\n  public render() {\n    const { pokemon } = this.props;\n    const { error, speciesDetails, varieties } = this.state;\n\n    return (\n      <>\n        {!pokemon && (\n          <Grid.Column width={16}>\n            <Segment placeholder>\n              <Header icon>\n                <Icon name=\"search\" />\n                Search for a defending pokemon to begin\n              </Header>\n            </Segment>\n          </Grid.Column>\n        )}\n        {error && (\n          <Grid.Column width={16}>\n            <ErrorDisplay error={error} />\n          </Grid.Column>\n        )}\n        {speciesDetails && varieties && Object.values(varieties).length ? (\n          <PokemonInfo species={speciesDetails} varieties={varieties} />\n        ) : (\n          <PokemonInfo.Placeholder />\n        )}\n      </>\n    );\n  }\n}\n\ninterface PokemonInfoProps {\n  species: PokemonSpecies;\n  varieties: { [name: string]: PokemonVariety };\n}\n\nfunction PokemonInfo({ species, varieties }: PokemonInfoProps) {\n  const defaultVariety =\n    Object.values(varieties).find(v => v.is_default) || varieties[0];\n  const [varietyName, setVarietyName] = React.useState(defaultVariety.name);\n  useEffect(() => {\n    if (!(varietyName in varieties)) {\n      setVarietyName(defaultVariety.name);\n    }\n  }, [varieties]);\n\n  const variety = varieties[varietyName as string];\n\n  const { entry_number } = keyedValue(species.pokedex_numbers, {\n    \"pokedex.name\": \"kanto\",\n  });\n  const { name: speciesName } = keyedValue(species.names, {\n    \"language.name\": \"en\",\n  });\n  const { genus } = keyedValue(species.genera, { \"language.name\": \"en\" });\n\n  return (\n    <>\n      <Grid.Column width={8}>\n        <Card fluid>\n          <Card.Content>\n            {variety && variety.sprites.front_default ? (\n              <Image\n                className=\"pokemon-sprite\"\n                floated=\"left\"\n                src={variety.sprites.front_default}\n              />\n            ) : (\n              <div className=\"pokemon-sprite placeholder\" />\n            )}\n            {species && (\n              <>\n                <Card.Header>\n                  #{entry_number} - {speciesName}\n                </Card.Header>\n                <Card.Meta>{genus}</Card.Meta>\n              </>\n            )}\n            {variety &&\n              variety.types.map(({ slot, type: { name } }: PokemonTypeSlot) => (\n                <TypeBadge key={slot} type={name} />\n              ))}\n            {species && (\n              <Card.Description>\n                {keyedValue(species.flavor_text_entries, {\n                  \"language.name\": \"en\",\n                  \"version.name\": \"yellow\",\n                }).flavor_text.replace(\"\\u000C\", \" \")}\n              </Card.Description>\n            )}\n            {varieties && Object.values(varieties).length > 1 && (\n              <Form>\n                <Form.Group inline>\n                  {Object.values(varieties).map(v => {\n                    const displayName =\n                      titleCase(\n                        v.name\n                          .replace(species.name, \"\")\n                          .replace(/-/g, \" \")\n                          .trim(),\n                      ) || \"Kanto\";\n                    return (\n                      <Form.Radio\n                        key={v.name}\n                        label={displayName}\n                        value={v.name}\n                        checked={varietyName === v.name}\n                        onChange={() => setVarietyName(v.name)}\n                      />\n                    );\n                  })}\n                </Form.Group>\n              </Form>\n            )}\n          </Card.Content>\n        </Card>\n      </Grid.Column>\n      <Grid.Column width={8}>\n        {variety && <TypeSummary types={variety.types.map(t => t.type.name)} />}\n      </Grid.Column>\n    </>\n  );\n}\n\nPokemonInfo.Placeholder = () => {\n  return (\n    <>\n      <Grid.Column width={8}>\n        <Card fluid>\n          <Placeholder>\n            <Card.Content>\n              <Placeholder.Image className=\"pokemon-sprite\" floated=\"left\" />\n              <Card.Header>\n                <Placeholder.Header />\n              </Card.Header>\n              <Card.Meta>\n                <Placeholder.Line />\n              </Card.Meta>\n              <TypeBadge.Placeholder />\n              <Card.Description>\n                <Placeholder.Paragraph>\n                  <Placeholder.Line />\n                  <Placeholder.Line />\n                </Placeholder.Paragraph>\n              </Card.Description>\n            </Card.Content>\n          </Placeholder>\n        </Card>\n      </Grid.Column>\n      <Grid.Column width={8}>\n        <TypeSummary.Placeholder />\n      </Grid.Column>\n    </>\n  );\n};\n","import { History, Location } from \"history\";\nimport _get from \"lodash-es/get\";\nimport React, { SyntheticEvent } from \"react\";\nimport { match as matchType, withRouter } from \"react-router-dom\";\nimport {\n  Dropdown,\n  DropdownItemProps,\n  DropdownProps,\n  Grid,\n  Header,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport { Pokedex } from \"pokeapi-js-wrapper\";\nimport pokeapi from \"../pokeapi\";\nimport { titleCase } from \"../utils\";\nimport PokemonDetails from \"./PokemonDetails\";\nimport \"./style.css\";\n\ninterface PokemonPageProps {\n  match: matchType<{ name: string }>;\n  location: Location;\n  history: History;\n}\n\ninterface PokemonPageState {\n  loading: boolean;\n  pokedex: null | Array<Pokedex>;\n}\n\nclass PokemonPage extends React.Component<PokemonPageProps, PokemonPageState> {\n  public state = {\n    loading: true,\n    pokedex: null,\n  };\n\n  constructor(props: PokemonPageProps) {\n    super(props);\n    this.handlePokemon = this.handlePokemon.bind(this);\n  }\n\n  public async componentDidMount() {\n    if (this.state.pokedex === null) {\n      this.setState({ loading: true });\n      const data = await pokeapi.getPokedexByName(\"kanto\");\n      this.setState({ loading: false, pokedex: data.pokemon_entries });\n    }\n  }\n\n  public handlePokemon(_: SyntheticEvent, { value }: DropdownProps) {\n    const { history, match } = this.props;\n    const newUrl = match.path.replace(\":name?\", value as string);\n    history.push(newUrl);\n  }\n\n  public render() {\n    const { match } = this.props;\n    const { pokedex } = this.state;\n\n    return (\n      <Segment vertical>\n        <Grid stackable>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h2\">Defender Info</Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <PokemonDropdown\n                onChange={this.handlePokemon}\n                pokedex={pokedex}\n                value={match.params.name}\n                placeholder=\"Defending Pokemon\"\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched>\n            <PokemonDetails pokemon={match.params.name} />\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    );\n  }\n}\n\nexport default withRouter(PokemonPage);\n\ninterface PokemonDropdownProps {\n  onChange?: (\n    ev: SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps,\n  ) => void;\n  pokedex: null | Array<Pokedex>;\n  value: string;\n  placeholder?: string;\n}\n\nfunction PokemonDropdown({\n  onChange,\n  pokedex,\n  value,\n  placeholder,\n}: PokemonDropdownProps) {\n  let options: Array<DropdownItemProps>;\n  if (pokedex) {\n    options = pokedex.map(pokemon => ({\n      key: pokemon.pokemon_species.name,\n      text: titleCase(pokemon.pokemon_species.name),\n      value: pokemon.pokemon_species.name,\n    }));\n  } else {\n    options = [];\n  }\n\n  if (value && !options.some(o => o.value === value)) {\n    options.push({ key: value, text: titleCase(value), value });\n  }\n\n  return (\n    <Dropdown\n      compact\n      fluid\n      placeholder={placeholder}\n      search\n      selection\n      options={options}\n      onChange={onChange}\n      value={value}\n    />\n  );\n}\n"],"sourceRoot":""}